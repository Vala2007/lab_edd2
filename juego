import customtkinter as ctk
from tkinter import messagebox
import random


class Nodo:
    def __init__(self, nombre, retos):
        # Cada nodo ahora puede tener varios retos posibles
        # Cada reto es una tupla: (pregunta, respuesta_correcta)
        self.nombre = nombre
        self.retos = retos
        self.izquierda = None
        self.derecha = None

    def obtener_reto(self):
        """Devuelve un reto aleatorio (pregunta, respuesta_correcta)."""
        return random.choice(self.retos)


class JuegoCiberseguridadCTK:
    def __init__(self, root):
        self.root = root
        self.root.title("Aventura Cibern√©tica üß†")
        self.root.geometry("700x500")

        # Tema oscuro y color base
        ctk.set_appearance_mode("dark")
        ctk.set_default_color_theme("green")

        # Construcci√≥n del √°rbol
        self.raiz = self.construir_arbol()
        self.actual = self.raiz
        self.pregunta_actual, self.respuesta_correcta = self.actual.obtener_reto()

        # Interfaz
        self.titulo = ctk.CTkLabel(root, text="üåê Aventura Cibern√©tica üåê", font=("Arial Rounded MT Bold", 24))
        self.titulo.pack(pady=10)

        self.texto_nodo = ctk.CTkLabel(root, text="", font=("Arial", 16, "bold"), wraplength=600)
        self.texto_nodo.pack(pady=10)

        self.texto_reto = ctk.CTkLabel(root, text="", font=("Arial", 14), wraplength=600)
        self.texto_reto.pack(pady=10)

        self.entrada = ctk.CTkEntry(root, width=300, font=("Arial", 14))
        self.entrada.pack(pady=5)
        self.entrada.bind("<Return>", lambda event: self.validar_respuesta())

        self.boton_responder = ctk.CTkButton(root, text="Responder", command=self.validar_respuesta, width=120, height=35)
        self.boton_responder.pack(pady=5)

        # Botones de movimiento
        self.frame_botones = ctk.CTkFrame(root)
        self.frame_botones.pack(pady=15)

        self.boton_izquierda = ctk.CTkButton(self.frame_botones, text="‚Üê Izquierda", width=120,
                                             command=lambda: self.mover("izquierda"), state="disabled")
        self.boton_izquierda.grid(row=0, column=0, padx=10)

        self.boton_derecha = ctk.CTkButton(self.frame_botones, text="Derecha ‚Üí", width=120,
                                           command=lambda: self.mover("derecha"), state="disabled")
        self.boton_derecha.grid(row=0, column=1, padx=10)

        self.boton_salir = ctk.CTkButton(root, text="Salir", fg_color="#ff4c4c", hover_color="#d12d2d",
                                         command=root.quit, width=100, height=30)
        self.boton_salir.pack(pady=10)

        self.mostrar_nodo()

    def construir_arbol(self):
        central = Nodo("Nodo Central Seguro", [
            ("Has restaurado la red. ¬°Felicitaciones, has ganado!", "")
        ])

        firewall = Nodo("Firewall Perimetral", [
            ("¬øCu√°l es la funci√≥n principal de un firewall?\n"
             "a) Proteger la red filtrando el tr√°fico\n"
             "b) Acelerar internet\n"
             "c) Guardar contrase√±as", "a"),
            ("¬øQu√© componente bloquea accesos no autorizados?\n"
             "a) Antivirus\nb) Firewall\nc) Router", "b")
        ])

        correo = Nodo("Servidor de Correo", [
            ("Identifica el ataque de phishing:\n"
             "a) Correo con enlace sospechoso\n"
             "b) Ataque DDoS\n"
             "c) Virus f√≠sico", "a"),
            ("¬øCu√°l de los siguientes es un correo fraudulento?\n"
             "a) Mensaje con enlace desconocido\n"
             "b) Comunicaci√≥n interna oficial\n"
             "c) Aviso del √°rea de TI", "a")
        ])

        raiz = Nodo("Servidor Principal", [
            ("Detecta la vulnerabilidad m√°s grave:\n"
             "a) Contrase√±a d√©bil\n"
             "b) Sistema actualizado\n"
             "c) Antivirus activo", "a"),
            ("¬øQu√© pr√°ctica pone en riesgo la red?\n"
             "a) Compartir contrase√±as\n"
             "b) Actualizar software\n"
             "c) Usar contrase√±as seguras", "a")
        ])

        raiz.izquierda = firewall
        raiz.derecha = correo
        firewall.izquierda = central
        correo.derecha = central

        return raiz

    def mostrar_nodo(self):
        self.texto_nodo.configure(text=f"üîπ Est√°s en: {self.actual.nombre}")
        self.texto_reto.configure(text=self.pregunta_actual)
        self.entrada.delete(0, 'end')
        self.entrada.focus()
        self.boton_izquierda.configure(state="disabled")
        self.boton_derecha.configure(state="disabled")

    def validar_respuesta(self):
        respuesta = self.entrada.get().strip().lower()

        if self.actual.nombre == "Nodo Central Seguro":
            messagebox.showinfo("Victoria", self.pregunta_actual)
            self.root.quit()
            return

        if respuesta != self.respuesta_correcta:
            messagebox.showwarning("Incorrecto", "‚ùå Respuesta incorrecta. Te lleg√≥ un nuevo desaf√≠o...")
            # Genera un nuevo reto aleatorio
            self.pregunta_actual, self.respuesta_correcta = self.actual.obtener_reto()
            self.mostrar_nodo()
        else:
            messagebox.showinfo("Correcto", "‚úÖ Respuesta correcta. Puedes avanzar.")
            self.boton_izquierda.configure(state="normal")
            self.boton_derecha.configure(state="normal")

    def mover(self, direccion):
        if direccion == "izquierda" and self.actual.izquierda:
            self.actual = self.actual.izquierda
        elif direccion == "derecha" and self.actual.derecha:
            self.actual = self.actual.derecha
        else:
            messagebox.showinfo("Movimiento inv√°lido", "No hay nodo en esa direcci√≥n.")
            return

        # Al moverse, genera un nuevo reto
        self.pregunta_actual, self.respuesta_correcta = self.actual.obtener_reto()
        self.mostrar_nodo()



if __name__ == "__main__":
    root = ctk.CTk()
    app = JuegoCiberseguridadCTK(root)
    root.mainloop()
